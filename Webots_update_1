#include <webots/robot.h>
#include <webots/motor.h>
#include <webots/distance_sensor.h>
#include <webots/position_sensor.h>
#include <webots/gps.h>
#include <stdio.h>
#include <math.h>
#include <stdbool.h>

#define TIME_STEP 100
#define MAX_SPEED 6.28
#define GPS_THRESHOLD 0.07    // Threshold distance to stop near the start point (in meters)
#define ONE_MINUTE 60000     // 60,000 milliseconds = 1 minute

// Global variables
WbDeviceTag gps;
struct {
    double x;
    double y;
} start_position;

// Delay function implementation
void delay(int milliseconds) {
    int start_time = wb_robot_get_time() * 1000;  // Get current simulation time in milliseconds
    while (wb_robot_step(wb_robot_get_basic_time_step()) != -1) {
        int current_time = wb_robot_get_time() * 1000;  // Get updated simulation time
        if (current_time - start_time >= milliseconds) {
            break;  // Exit the loop after the specified delay time
        }
    }
}

// Function to check if robot has returned to start position
static int is_back_at_start() {
    const double *gps_values = wb_gps_get_values(gps);
    double dx = gps_values[0] - start_position.x;
    double dy = gps_values[1] - start_position.y;
    double distance = sqrt(dx*dx + dy*dy);
    printf("S: (%.2f, %.2f,%.2f,%.2f)\n", dx, dy, distance, GPS_THRESHOLD);
    return distance < GPS_THRESHOLD;
}

// Function to record the initial position
static void record_start_position() {
    const double *gps_values = wb_gps_get_values(gps);
    start_position.x = gps_values[0];
    start_position.y = gps_values[1];
    printf("Start position recorded: (%.2f, %.2f)\n", start_position.x, start_position.y);
}

int main(int argc, char **argv) {
  wb_robot_init();
  
  // Motor initialization
  WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");
  WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");
  
  // GPS initialization
  gps = wb_robot_get_device("gps");
  wb_gps_enable(gps, TIME_STEP);
  
  // Distance sensors initialization
  WbDeviceTag ps5 = wb_robot_get_device("ps5");  // Left sensor
  WbDeviceTag ps7 = wb_robot_get_device("ps7");  // Front sensor
  wb_distance_sensor_enable(ps5, TIME_STEP);
  wb_distance_sensor_enable(ps7, TIME_STEP);
  
  // Position sensors
  WbDeviceTag left_pos_sensor = wb_robot_get_device("left wheel sensor");
  WbDeviceTag right_pos_sensor = wb_robot_get_device("right wheel sensor");
  wb_position_sensor_enable(left_pos_sensor, TIME_STEP);
  wb_position_sensor_enable(right_pos_sensor, TIME_STEP);
  
  // Set up motors for velocity control
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);
  wb_motor_set_velocity(left_motor, 0.0);
  wb_motor_set_velocity(right_motor, 0.0);
  
  // Wait for GPS to initialize
  wb_robot_step(TIME_STEP);
  
  // Record the starting position
  record_start_position();
  
  // Flag to track if one minute has passed
  bool one_minute_passed = false;
  int start_time = wb_robot_get_time() * 1000;
  
  while (wb_robot_step(TIME_STEP) != -1) {
    int current_time = wb_robot_get_time() * 1000;
    
    // Check if one minute has passed
    if (!one_minute_passed && (current_time - start_time >= ONE_MINUTE)) {
      printf("One minute has passed. Starting to check for return to start position.\n");
      one_minute_passed = true;
    }
    
    // Only check for return to start after one minute
    if (one_minute_passed && is_back_at_start()) {
      printf("Returned to starting point. Stopping robot.\n");
      wb_motor_set_velocity(left_motor, 0.0);
      wb_motor_set_velocity(right_motor, 0.0);
      break;
    }
    
    // Wall-following behavior
    bool left_wall = wb_distance_sensor_get_value(ps5) > 80;
    bool front_wall = wb_distance_sensor_get_value(ps7) > 80;
    
    double left_speed, right_speed;
    
    if (front_wall) {
      // Turn right when facing a wall
      left_speed = MAX_SPEED;
      right_speed = -MAX_SPEED;
    } else if (left_wall) {
      // Go straight when wall is on the left
      left_speed = MAX_SPEED;
      right_speed = MAX_SPEED;
    } else {
      // Turn left to find a wall
      left_speed = MAX_SPEED / 8;
      right_speed = MAX_SPEED;
    }
    
    // Apply motor speeds
    wb_motor_set_velocity(left_motor, left_speed);
    wb_motor_set_velocity(right_motor, right_speed);
  }
  
  wb_robot_cleanup();
  return 0;
}
