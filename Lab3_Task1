#include <stdio.h>   // Standard Input/Output header for printf, scanf, etc.
#include <stdbool.h> // To use boolena logic
#include <stdlib.h>  // Standard library header for exit() and other utility functions

#define SIZE 24       // Define SIZE for length of the array
#define nCols 3       // Define the number of columns for 2D arrays
#define nRows 8       // Define the number of rows for 2D arrays

// Function prototypes
void print_array(int array[], int length);                                                              // Prints a 1D array
void print_matrix(int mat[][nCols], int rows);                                                          // Prints a 2D matrix
bool isValid(const int arr[], int length, int pos);                                                     // Checks if a position is valid in the array
void remove_element(int arr[], int length, int pos);                                                    // Removes an element at a given position from the array
void insert_element(int arr[], int length, int pos, int value);                                         // Inserts a value at a specific position in the array
void reshape(const int arr[], int length, int nrows, int ncols, int arr2d[nRows][nCols]);               // Reshapes a 1D array into a 2D array
void trans_matrix(int nrows, int ncols, const int mat[nrows][ncols], int mat_transp[nCols][nrows]);     // Transposes a 2D matrix
bool found_duplicate(int arr[], int length);                                                            // Checks if the array contains duplicates
void print_matrix_transp(int arr[][8], int rows);                                                       // Prints a transposed 2D matrix

int main() { //start/open main function
    int arr[SIZE];               // Declare a 1D array of size SIZE
    int arr2d[nRows][nCols];     // Declare a 2D array with nRows and nCols
    print_matrix(arr2d, nRows);  // Print the initial 2D array

    //Initialize the array with values from 1 to SIZE
    printf("Initializing the array arr with the following values: 1, 2, 3, ... 24\n");
    for (int i = 0; i < SIZE; i++)
        arr[i] = i + 1;  // Assign values to the array elements sequentially
    print_array(arr, SIZE); // Print the array
    printf("\n"); //printing new line

    // Remove the element at position 7
    printf("Removing the element at position 7 from the array arr\n"); //printing relevant statement
    remove_element(arr, SIZE, 7); // Call remove_element function with index 
    print_array(arr, SIZE); //printing array 
    printf("\n"); //printing new line 

    // Insert the value 25 at position 7
    printf("Inserting the value 25 at position 7 in the array arr\n"); //printing relevant statement 
    insert_element(arr, SIZE, 7, 25); // Call insert_element function with index and value
    print_array(arr, SIZE); //printing array
    printf("\n");//printing neww linw

    // Reshape the array into a 2D array
    printf("Reshaping the array arr into a 2D array arr2d with 8 rows and 3 columns\n"); //printing relevant statement 
    reshape(arr, SIZE, nRows, nCols, arr2d); // Call reshape function
    print_matrix(arr2d, nRows); //printing array
    printf("\n"); //printing new line

    // Transpose the 2D array into another array
    printf("Transposing the 2D array arr2d into a new 2D array arr2d_transp with 3 rows and 8 columns\n"); // printing relevant statement
    int arr2d_transp[nCols][nRows]; // Declare a transposed array
    trans_matrix(nRows, nCols, arr2d, arr2d_transp); // Call transpose function
    print_matrix_transp(arr2d_transp, nCols); // Print the transposed array
    printf("\n"); //printing new line

    // Check for duplicates in the array
    printf("Checking if the array arr has any duplicate elements\n");  // printing relevant statement
    if (found_duplicate(arr, SIZE))  // if duplicate is found
        printf("The array has duplicate elements\n\n"); // printing relevant statement
    else // if duplicate is not found 
        printf("The array does not have duplicate elements\n\n"); // printing relevant statement

    // Test with a new array containing duplicates
    printf("Test 2\n"); 
    int arr2[SIZE] = {1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 18, 19, 20, 21, 22};
    if (found_duplicate(arr2, SIZE)) // if duplicate is found 
        printf("The array has duplicate elements\n\n"); //printing relevant statement
    else // if duplicate is not found 
        printf("The array does not have duplicate elements\n\n"); // printing relevant statement

    return 0; // End of main function
} //closing main function


void print_array(int array[], int length) {     // Function to print a 1D array
    for (int i = 0; i < length; i++)            // loop for looping through each element in the array
        printf("array[%d]= %d\n", i, array[i]); // Print each element with its index
}                                               // close function
 

void print_matrix(int mat[][nCols], int rows) {           // Function to print a 2D matrix
    for (int i = 0; i < rows; i++) {                      // Loop through rows
        for (int j = 0; j < nCols; j++)                   // Loop through columns
            printf("mat[%d][%d]= %d\n", i, j, mat[i][j]); // Print each element
        puts("");                                         // Print a newline after each row
    }
}                                                         // close function

bool isValid(const int arr[], int length, int pos) { // Function to validate an index
    return pos >= 0 && pos < length;                 // Return true if the index is within bounds
}                                                    // close function

void remove_element(int arr[], int length, int pos){ // Function to remove an element at a given index
    if (isValid(arr, length, pos)) {                 // checking if array has enough elements and proceeding
        for (int i = pos; i < length - 1; i++)       // looping through the elements 
            arr[i] = arr[i + 1];                     // Shift elements left to overwrite
    } else {                                         // if array does not have enough elements
        printf("Invalid index\n");                   // prints relevant statement
        exit(1);                                     // Exit program if invalid index
    }
}                                                    // close function

void insert_element(int arr[], int length, int pos, int value) { // Function to insert an element at a given index
    if (isValid(arr, length, pos)) {                             // checking if index is available, proceeeding
        for (int i = length - 1; i > pos; i--)                   // Shift elements right to make space
            arr[i] = arr[i - 1];                                 // looping through each element in the array
        arr[pos] = value;                                        // Insert the value
    } else {                                                     // if index is unavailable
        printf("Invalid index\n");                               // printing relavant statement 
        exit(1);                                                 // Exit program if invalid index
    }                                                            // close for loop
}                                                                // close function

void reshape(const int arr[], int length, int nrows, int ncols, int arr2d[nRows][nCols]) { // Function to reshape a 1D array into a 2D array
    if (length != nrows * ncols) {                                                         // checking for reshaping possibility
        printf("Error: The length of arr is not equal to rows*cols\n");                    // printing relevant statement
        exit(1);                                                                           // Exit if reshaping is not possible
    }
    int k = 0;                                                                             //specify k datatype
    for (int i = 0; i < nrows; i++) {                                                      // Loop through rows
        for (int j = 0; j < ncols; j++) {                                                  // Loop through columns
            arr2d[i][j] = arr[k];                                                          // Map 1D array elements to 2D array
            k++;
        }
    }
}                                                                                          // close function

void trans_matrix(int nrows, int ncols, const int mat[nrows][ncols], int mat_transp[ncols][nrows]) {       // Function to transpose a matrix
    for (int i = 0; i < nrows; i++) {                                                                      // Loop through rows
        for (int j = 0; j < ncols; j++) {                                                                  // Loop through columns
            mat_transp[j][i] = mat[i][j];                                                                  // Swap rows and columns
        }
    }
}

bool found_duplicate(int arr[], int length) {  // Function to check for duplicates in an array
    for (int i = 0; i < length; i++) {         // Loop through each element
        for (int j = i + 1; j < length; j++) { // Compare with all subsequent elements
            if (arr[i] == arr[j])              // If duplicate is found
                return true;                   // returning value
        }                                      // close subsequent elements for loop
    }                                          // close for loop
    return false;                              // Return false if no duplicates
}

void print_matrix_transp(int arr[][8], int rows) {         // Function to print a transposed 2D matrix
    for (int i = 0; i < rows; i++) {                       // Loop through rows
        for (int j = 0; j < 8; j++) {                      // Loop through columns (8 columns)
            printf("mat[%d][%d]= %d\n", i, j, arr[i][j]);  // printing the transpose 
        }                                                  // close column for loop
        printf("\n");                                      // Print a newline after each row
    }                                                      // close row for loop
}                                                          // close function
