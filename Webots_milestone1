#include <webots/robot.h>  /*to initialize, control, close robot*/
#include <webots/motor.h>  /*to control wheels, speed, location of robot*/
#include <webots/distance_sensor.h> /*to use distance sensors*/
#include <webots/light_sensor.h>    /*to use light sensors*/
#include <stdio.h>    /*to use printf(), standard input-output func*/
#include <stdbool.h>  /*to use boolean logic*/

#define TIME_STEP 100   /*data updates every 100 ms*/
#define MAX_SPEED 6.28  /*speed of robot is 6.28 rad/s*/
#define NUM_SENSORS 8   /*8 light, distance sensors*/

/*function includes command line arguments and vectors*/
int main(int argc, char **argv) { 
  wb_robot_init();  /*starts the webots simulation*/
   /*tags the device motors*/
  WbDeviceTag left_motor = wb_robot_get_device("left wheel motor");
  WbDeviceTag right_motor = wb_robot_get_device("right wheel motor");
   /*the left and right motors rotate infinitely*/
  wb_motor_set_position(left_motor, INFINITY);
  wb_motor_set_position(right_motor, INFINITY);
  /*initial velocity is 0*/
  wb_motor_set_velocity(left_motor, 0.0);
  wb_motor_set_velocity(right_motor, 0.0);
  /*makes an array to store 8 distance sensors, each sensor has its own devicetag*/
  WbDeviceTag dist_sensors[NUM_SENSORS];
  /*makes an array to store 8 light sensors, each sensor has its own devicetag*/
  WbDeviceTag light_sensors[NUM_SENSORS];
  
  /*array with capacity of 5 characters*/
  char sensor_name[5];
  
  /*loop for each sensor with certain conditions */
  for (int i = 0; i < NUM_SENSORS; i++) {
    /*to put sensor name into the array above*/
    sprintf(sensor_name, "ps%d", i);  
    /*gets the sensor value and assigns in dist_sensors array*/
    dist_sensors[i] = wb_robot_get_device(sensor_name);
    /*distance sensor will start providing data at the given time step*/ 
    wb_distance_sensor_enable(dist_sensors[i], TIME_STEP);

    /*to put sensor name into the array above*/
    sprintf(sensor_name, "ls%d", i);
    /*gets the sensor value and assigns in light_sensors array*/
    light_sensors[i] = wb_robot_get_device(sensor_name);
    /*light sensor will start providing data at the given time step*/
    wb_light_sensor_enable(light_sensors[i], TIME_STEP);
  }

/*loop runs while time_step is not equal to -1*/
  while (wb_robot_step(TIME_STEP) != -1) {
    double dist_sum = 0.0, light_sum = 0.0; /*initialises variables to 0*/
    
    printf("Sensor values:\n"); /*prints statement*/
    /*for loop with certain conditions*/
    for (int i = 0; i < NUM_SENSORS; i++) {
    /*defines data type from dist & lights arrays and gets it*/
      double dist_value = wb_distance_sensor_get_value(dist_sensors[i]);
      double light_value = wb_light_sensor_get_value(light_sensors[i]);
      /*prints statement*/
      printf("ps%d: %.1f, ls%d: %.1f\n", i, dist_value, i, light_value);
      /*adds values to get the total sum of dist & light*/
      dist_sum += dist_value;
      light_sum += light_value;
    }
    /*prints statements, divides the sum by number of sensors to get average*/
    printf("Average distance sensor value: %.2f\n", dist_sum / NUM_SENSORS);
    printf("Average light sensor value: %.2f\n", light_sum / NUM_SENSORS);

    /*robot uses sensor 5 to check for obstacle, true if distance is more than 80*/
    bool left_wall = wb_distance_sensor_get_value(dist_sensors[5]) > 80;
    /*robot uses sensor 7 to check for obstacle, true if distnace is more than 80*/
    bool front_wall = wb_distance_sensor_get_value(dist_sensors[7]) > 80;
    /*data type for left_speed, right_speed*/
    double left_speed, right_speed;
    /*if theres front wall then robot moves leftside full speed and reverse rightside speed*/
    if (front_wall) {
      left_speed = MAX_SPEED;
      right_speed = -MAX_SPEED;
      /*if theres wall on left, robot continues front*/
    } else if (left_wall) {
      left_speed = MAX_SPEED;
      right_speed = MAX_SPEED;
      /*if no walls then robot goes rightside full speed and slows leftside speed*/
    } else {
      left_speed = MAX_SPEED / 8;
      right_speed = MAX_SPEED;
    }
   /*sets velocity of the robot from left motor and left speed*/
    wb_motor_set_velocity(left_motor, left_speed);
   /*sets velocity of the robot from right motor and right speed*/
    wb_motor_set_velocity(right_motor, right_speed);
  }
 /*to close the robot and stimulation*/
  wb_robot_cleanup();
  return 0; /*to end the main funtion*/
}
